package pl.aaugustyniak.backproptrainer.model.entities;
// Generated 2013-08-25 15:19:23 by Hibernate Tools 3.2.1.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PeceptronTest generated by hbm2java
 */
@Entity
@Table(name = "peceptron_test")
public class PeceptronTest implements java.io.Serializable {

    private Long id;
    private String datasetLabel;
    private String perceptronLabel;
    private int bpEpochs;
    private double goalTrainingMse;
    private double trainingMseResult;
    private double validationMseResult;
    private byte[] confusionMatrix;
    private double efficiencyFactorResult;
    private double trf;
    private double totalPerceptronRate;
    private Date dateStarted;
    private Date dateFinished;
    private Set<TrainingMseReadout> trainingMseReadouts = new HashSet<TrainingMseReadout>(0);
    private Set<ValidationMseReadout> validationMseReadouts = new HashSet<ValidationMseReadout>(0);

    public PeceptronTest() {
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = "dataset_label", nullable = false, length = 65535)
    public String getDatasetLabel() {
        return this.datasetLabel;
    }

    public void setDatasetLabel(String datasetLabel) {
        this.datasetLabel = datasetLabel;
    }

    @Column(name = "perceptron_label", nullable = false, length = 65535)
    public String getPerceptronLabel() {
        return this.perceptronLabel;
    }

    public void setPerceptronLabel(String perceptronLabel) {
        this.perceptronLabel = perceptronLabel;
    }

    @Column(name = "bp_epochs", nullable = false)
    public int getBpEpochs() {
        return this.bpEpochs;
    }

    public void setBpEpochs(int bpEpochs) {
        this.bpEpochs = bpEpochs;
    }

    @Column(name = "goal_training_mse", nullable = false, precision = 22, scale = 0)
    public double getGoalTrainingMse() {
        return this.goalTrainingMse;
    }

    public void setGoalTrainingMse(double goalTrainingMse) {
        if (Double.isNaN(goalTrainingMse)) {
            goalTrainingMse = 0.0;
        }
        this.goalTrainingMse = goalTrainingMse;
    }

    @Column(name = "training_mse_result", nullable = false, precision = 22, scale = 0)
    public double getTrainingMseResult() {
        return this.trainingMseResult;
    }

    public void setTrainingMseResult(double trainingMseResult) {
        if (Double.isNaN(trainingMseResult)) {
            trainingMseResult = 0.0;
        }
        this.trainingMseResult = trainingMseResult;
    }

    @Column(name = "validation_mse_result", nullable = false, precision = 22, scale = 0)
    public double getValidationMseResult() {
        return this.validationMseResult;
    }

    public void setValidationMseResult(double validationMseResult) {
        if (Double.isNaN(validationMseResult)) {
            validationMseResult = 0.0;
        }
        this.validationMseResult = validationMseResult;
    }

    @Lob
    @Column(name = "confusion_matrix", nullable = false, length = 2097152)
    public byte[] getConfusionMatrix() {
        return this.confusionMatrix;
    }

    public void setConfusionMatrix(byte[] confusionMatrix) {
        this.confusionMatrix = confusionMatrix;
    }

    @Column(name = "efficiency_factor_result", nullable = false, precision = 22, scale = 0)
    public double getEfficiencyFactorResult() {
        return this.efficiencyFactorResult;
    }

    public void setEfficiencyFactorResult(double efficiencyFactorResult) {

        if (Double.isNaN(efficiencyFactorResult)) {
            efficiencyFactorResult = 0.0;
        }
        this.efficiencyFactorResult = efficiencyFactorResult;
    }

    @Column(name = "trf", nullable = false, precision = 22, scale = 0)
    public double getTrf() {
        return this.trf;
    }

    public void setTrf(double trf) {
        if (Double.isNaN(trf)) {
            trf = 0.0;
        }
        this.trf = trf;
    }

    @Column(name = "total_perceptron_rate", nullable = false, precision = 22, scale = 0)
    public double getTotalPerceptronRate() {
        return this.totalPerceptronRate;
    }

    public void setTotalPerceptronRate(double totalPerceptronRate) {
        
        if (Double.isNaN(totalPerceptronRate)) {
            totalPerceptronRate = 0.0;
        }
        this.totalPerceptronRate = totalPerceptronRate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date_started", nullable = false, length = 19)
    public Date getDateStarted() {
        return this.dateStarted;
    }

    public void setDateStarted(Date dateStarted) {
        this.dateStarted = dateStarted;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date_finished", nullable = false, length = 19)
    public Date getDateFinished() {
        return this.dateFinished;
    }

    public void setDateFinished(Date dateFinished) {
        this.dateFinished = dateFinished;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "peceptronTest")
    public Set<TrainingMseReadout> getTrainingMseReadouts() {
        return this.trainingMseReadouts;
    }

    public void setTrainingMseReadouts(Set<TrainingMseReadout> trainingMseReadouts) {
        this.trainingMseReadouts = trainingMseReadouts;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "peceptronTest")
    public Set<ValidationMseReadout> getValidationMseReadouts() {
        return this.validationMseReadouts;
    }

    public void setValidationMseReadouts(Set<ValidationMseReadout> validationMseReadouts) {
        this.validationMseReadouts = validationMseReadouts;
    }
}
